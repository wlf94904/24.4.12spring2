<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    	xmlns:aop="http://www.springframework.org/schema/aop"
    	xsi:schemaLocation="http://www.springframework.org/schema/beans
    						 http://www.springframework.org/schema/beans/spring-beans.xsd
    						 http://www.springframework.org/schema/aop
    						 http://www.springframework.org/schema/aop/spring-aop.xsd">

<!--  配置service-->
	<bean id="customerService" class="com.itheima.service.impl.CustomerServiceImpl"></bean>
	<!--把通知类交给spring来管理  -->
	<bean id="Logger" class="com.itheima.utils.Logger"></bean>

	<aop:config>
	<!--  定义通用的切入点表达式，如果写在aop:aspect标签外部，则表示所有切面可用-->
		<aop:pointcut expression="execution(* com.itheima.service.impl.*.*(..))" id="pt1"/>
		<!--配置切面-->
		<aop:aspect id="LogAdvice" ref="Logger">
			<!--  配置前置通知：永远在切入点方法执行之前执行
			<aop:before method="beforePrintLog" pointcut-ref="pt1"/>-->
			<!--  配置后置通知：切入点方法正常执行之后执行
			<aop:after method="afterReturningPrintLog" pointcut-ref="pt1"/>-->
			<!--  配置异常通知：切入点方法执行产生异常之后执行。它和后置通知永远只能执行一个
			<aop:after method="afterThrowingPrintLog" pointcut-ref="pt1"/>-->
			<!--  配置最终通知：无论切入点方法是否正常执行，它都会在其后面执行
			<aop:after method="afterPrintLog" pointcut-ref="pt1"/>-->
			
			<!--  配置环绕通知-->
			<aop:around method="aroundPrintLog" pointcut-ref="pt1"></aop:around>
		</aop:aspect>
		
	</aop:config>

</beans>